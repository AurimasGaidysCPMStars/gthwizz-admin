import { collection } from 'firebase/firestore'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useCollection } from 'react-firebase-hooks/firestore'
import { Layout } from '../components/Layout'
import { RequestCell } from '../components/request-cell/RequestCell'
import { firestore } from '../services/clientApp'
import styles from '../styles/Home.module.css'

import { RequestData } from "../models/request";
import moment from 'moment'
import { useState } from 'react'

interface RPProps {
    i: number;
}

const Home: NextPage = () => {

    const [value, loading, error] = useCollection(
        collection(firestore, 'requests'),
        {
            snapshotListenOptions: { includeMetadataChanges: true },
        }
    );

    const compare = (a: RequestData, b: RequestData) => {
        if (a.dateCreated < b.dateCreated) {
            return -1;
        }
        if (a.dateCreated > b.dateCreated) {
            return 1;
        }
        return 0;
    }

    const RenderItem = ({ i }: RPProps) => {
        const [closed, setClosed] = useState(true)

        if (value && value.docs.map(x => { return x.data() as RequestData })
            .filter(x => moment(x.dateCreated).month() == i).length < 1) {
            return <div />
        }

        return <div>
            {<div style={{ backgroundColor: "black", color: "white", padding: 10 }} onClick={() => setClosed(!closed)}>2022 {moment().month(i).format("MMM")}</div>}
            {(!closed) && <div>
                {/* {value && value.docs.map(x => { return x.data() as RequestData }).sort(compare).map((x, i) => <div key={x.id}><RequestCell data={x} id={i} /></div>)} */}
                {value && value.docs.map(x => { return x.data() as RequestData })
                    .filter(x => moment(x.dateCreated).month() == i)
                    .sort(compare)
                    .map((x, i) => <div style={{ padding: 10 }} key={x.id}><RequestCell data={x} id={i} /></div>)}
            </div>}
        </div>
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Layout>
                <div></div>
                <div className={"flex flex-col w-full h-screen bg-slate-500 p-4 overflow-scroll space-y-4"}>
                    {/* {value && value.docs.map(x => { return x.data() as RequestData }).sort(compare).map((x, i) => <div key={x.id}><RequestCell data={x} id={i} /></div>)}
                    {value && value.docs.map(x => { return x.data() as RequestData })
                        .filter(x => moment(x.dateCreated).month() == 5)
                        .sort(compare)
                        .map((x, i) => <div key={x.id}> {moment(x.dateCreated).toISOString()}</div>)} */}
                    {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(x => <RenderItem key={x} i={x}/>)}
                </div>
            </Layout>
        </div>
    )
}

export default Home

